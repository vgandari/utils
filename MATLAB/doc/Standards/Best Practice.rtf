{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \\title\{Coding Standard\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \\section\{Before You Begin\}\
\
\
Open files should not have the same name\
Create flowchart by hand (top-down design)\
Create flowcharts for each block in top level flowchart\
Finalize flowchart for entire program\
Build functions and classes from the bottom up\
Do not build a new function/class until it has passed V&V\
Code should be self documenting\
\
\\section\{Comments\}\
\
Include directories of functions and classes called by function in header\
Include directories of functions and classes that the function calls in header\
You should be able to fully understand what the program does without ever looking at the code itself\
Use capital letters for describing process on preceding line of code\
Use lowercase letters on preceding line of code to denote complex control flow\
Use lowercase letters at the end of each line (or add special characters before comment on preceding line) to indicate assumptions and units\
Use empty comment at end of line to denote conscious decision to make no assumptions\
Create a comment with only special characters across entire line to indicate arbitrarily important division\
Add keywords for questions, issues, and particular methodologies\
\
\\section\{Headers\}\
\
Include all information about the function at top (create templates)\
Limitations and assumptions\
Include warning for completion of documentation\
Include warning for completion of code\
Include warning for verification\
Include warning for validation\
\
\\section\{Practice\}\
\
See \\href\{\}\{C++ Coding Standard\}\
Create macros for everything\
Minimize dependencies to keep with \\ref\{cm\} below\
Create a ticket system for yourself\
\
\\section\{Configuration Management\}\
\\label\{sec:cm\}\
\
Each project/tool has the same structure. There is the /tool folder with the /tool/v# folder, where # is the version number. Programs that do not have the highest priority features built in will be 0.#. Each set of features one level down in priority will increase the first decimal value. Each revision will increase the second decimal value.\
\
For example, during development, sc_attitude would have had /sc_attitude/v0.1. It is now /sc_attitude/v1.0. If the program interfaces are done in a way that meets the coding standard and minimizes dependencies (the next set of priorities), it will be v1.1. Any features that get added before the next set of priorities (say, removing the circular orbit assumption), will be v1.1.1, 1.1.2, and so on until the controller is added and it will become v1.2. Adding a controller, or removing the Earth point mass assumption would create v2.0 and v3.0, with incremental updates adding decimal values.\
\
Code will be organized in the following way:\
\
\\begin\{tabular\}\
/bin &executables\\\\\
/lib &header files\\\\\
/models &\\\\\
/utils &general functions copied (if pushed to GitHub) from main directory (all utilities must be kept in one place)\\\\\
/usr &inputs, mostly; also any user defined functions that "plug into" main program\
/vv &incomplete code\\\\\
/graphics &plotting tools, mostly\
\\end\{tabular\}\
\
Note that files outside /vv must have a way of interacting with files in /vv before and after V&V completion. That is, simply moving the files from /vv to another folder should be enough to compile/run the code.\
\
Use git for version control. Make small, incremental commits.\
\
\\section\{Additional Requirements/Features\}\
Code must be easy to replace with something in /vv\
No redundancy\
Minimize dependencies\
Avoid block comments\
All issues copied to central location\
Easy to find error in scripts (point to correct file)\
units specification\
tolerances\
easy switching, single vs batch\
Independent of default paths\
configure for frequent reinstall of OS/reformat of HDD\
\
\\section\{Tools\}\
sensitivity analysis\
monte carlo\
connect/disconnect (block diagrams)\
easy to check nominal cases\
rerun solvers with different boundary conditions\
better input for ICs/BVs\
cross compile across OSs\
call using .bat/.sh\
easy to copy subroutines and warning/error functions\
}